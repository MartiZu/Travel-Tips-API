/* By using this CSS reset, you create a consistent baseline for your styles, helping to avoid unexpected differences between various elements and browsers. It's a common practice at the beginning of a CSS file to ensure a more predictable layout and styling experience. */
*,
::before,
::after {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  /* This changes the box-sizing model for all elements (including pseudo-elements) to "border-box." In this model, an element's padding and border are included in its total width and height, making it easier to control the sizing of elements. */
}

html {
  font-size: 62.5%;
}
/* This will set the default font size for your web page to 10px (the browser default is 16px). */
/* This will make it easier for you to work with rem units later, as 2rem would be 20px. */

body {
  font-family: Arial, Helvetica, sans-serif;
  color: linen;
  background-color: rgb(20, 30, 40);
}

h1 {
  font-family: "Courier New", Courier, monospace;
}

h2,
h3,
h4,
h5,
h6 {
  font-family: sans-serif;
}

a {
  text-decoration: none;
  color: linen;
}

main {
  display: grid;
  grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(
      2rem,
      1fr
    );
  row-gap: 3rem;
}

.heading {
  display: grid;
  grid-column: 2 / 3;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  row-gap: 1.5rem;
}

.text {
  grid-column: 2/3;
  /* property determines which columns an element starts and ends at. */
  font-size: 1.8rem;
  letter-spacing: 0.6px;
  column-width: 25rem;
}

.hero {
  grid-column: 1 / -1;
  /* There may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. To do this, you can use -1 for the end column. */
}

img {
  width: 100%;
  object-fit: cover;
  /* The object-fit property tells the browser how to position the element within its container. In this case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect ratio. */
}

.hero-title {
  text-align: center;
  color: orangered;
  font-size: 8rem;
}

.hero-subtitle {
  font-size: 2.4rem;
  color: orangered;
  text-align: center;
}

.author {
  font-size: 2rem;
  font-family: Arial, Helvetica, sans-serif;
}

.author-name a:hover {
  background-color: #306203;
  /* This will create a hover effect only for the a element within the .author-name, showing the original freeCodeCamp green in the background. */
}

.social-icons {
  display: grid;
  font-size: 3rem;
  grid-template-columns: repeat(5, 1fr);
  /* If you wanted to add more social icons, but keep them on the same row, you would need to update grid-template-columns to create additional columns. As an alternative, you can use the grid-auto-flow property. */
  grid-auto-flow: column;
  /* This property takes either row or column as the first value, with an optional second value of dense. grid-auto-flow uses an auto-placement algorithm to adjust the grid layout. Setting it to column will tell the algorithm to create new columns for content as needed. The dense value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order. */
  grid-auto-columns: 1fr;
  /* ow the auto-placement algorithm will kick in when you add a new icon element. However, the algorithm defaults the new column width to be auto, which will not match your current columns. */
  align-items: center;
  /* will align child elements along the column axis, and justify-items will align child elements along the row axis. */
}

.first-paragraph::first-letter {
  font-size: 6rem;
  color: orangered;
  float: left;
  margin-right: 1rem;
}

hr {
  margin: 1.5rem 0;
  border: 1px solid rgba(120, 120, 120, 0.6);
}

.text-with-images {
  display: grid;
  grid-template-columns: 1fr 2fr;
  column-gap: 3rem;
  margin-bottom: 3rem;
}

.lists {
  list-style-type: none;
  /* This will get rid of the bullet points on the list items. */
  margin-top: 2rem;
}

.lists li {
  margin-bottom: 1.5rem;
}

.list-title,
.list-subtitle {
  color: #00beef;
}

.image-wrapper {
  display: grid;
  grid-template-columns: 2fr 1fr;
  grid-template-rows: repeat(3, min-content);
  /* This will give our grid rows that adjust in height based on the content, but columns that remain a fixed width based on the container. */
  gap: 2rem;
  /* The gap property is a shorthand way to set the value of column-gap and row-gap at the same time. If given one value, it sets the column-gap and row-gap both to that value. If given two values, it sets the row-gap to the first value and the column-gap to the second. */

  place-items: center;
  /* The place-items property can be used to set the align-items and justify-items values at the same time. The place-items property takes one or two values. If one value is provided, it is used for both the align-items and justify-items properties. If two values are provided, the first value is used for the align-items property and the second value is used for the justify-items property. */
}

.image-1,
.image-3 {
  grid-column: 1 / -1;
  /* This will allow the first and third images to span the full width of the grid. */
}

@media only screen and (max-width: 720px) {
  .image-wrapper {
    grid-template-columns: 1fr;
  }
}

@media only screen and (max-width: 600px) {
  .text-with-images {
    grid-template-columns: 1fr;
  }
}

@media only screen and (max-width: 550px) {
  .hero-title {
    font-size: 6rem;
  }
  .hero-subtitle,
  .author,
  .quote,
  .list-title {
    font-size: 1.8rem;
  }
  .social-icons {
    font-size: 2rem;
  }
  .text {
    font-size: 1.6rem;
  }
}

@media only screen and (max-width: 420px) {
  .hero-title {
    font-size: 4.5rem;
  }
}
